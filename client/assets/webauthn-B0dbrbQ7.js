import{a as d}from"./AuthContext-DZ0VfLeJ.js";function l(a){const i=new Uint8Array(a);let t="";for(let r=0;r<i.byteLength;r++)t+=String.fromCharCode(i[r]);return btoa(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}function g(a){const i="=".repeat((4-a.length%4)%4),t=a.replace(/-/g,"+").replace(/_/g,"/")+i,r=atob(t),e=new Uint8Array(r.length);for(let o=0;o<r.length;o++)e[o]=r.charCodeAt(o);return e.buffer}async function f(a,i,t,r){console.log("=== START REGISTRATION ==="),console.log("Input parameters:",{username:a,firstName:i,lastName:t,email:r});try{console.log("Step 1: Getting registration challenge...");const e=await d.getRegistrationChallenge({username:a,first_name:i,last_name:t,email:r});console.log("Challenge response:",e);const o={publicKey:{challenge:g(e.challenge),rp:{id:e.rp.id,name:e.rp.name},user:{id:g(e.user.id),name:e.user.name,displayName:e.user.displayName},pubKeyCredParams:e.pubKeyCredParams.map(u=>({type:u.type,alg:u.alg})),timeout:e.timeout,authenticatorSelection:{authenticatorAttachment:e.authenticatorSelection.authenticatorAttachment,residentKey:e.authenticatorSelection.residentKey,userVerification:e.authenticatorSelection.userVerification},attestation:e.attestation}};console.log("Credential creation options:",o),console.log("Step 3: Creating credential with navigator.credentials.create...");const n=await navigator.credentials.create(o);if(!n)throw new Error("Failed to create credential");if(console.log("Credential created:",n),console.log("Credential ID:",n.id),console.log("Credential rawId:",n.rawId),console.log("Credential response:",n.response),!n.id)throw new Error("Credential missing required id");if(!n.rawId)throw new Error("Credential missing required rawId");const s=n.response;if(!s.clientDataJSON)throw new Error("Credential response missing clientDataJSON");if(!s.attestationObject)throw new Error("Credential response missing attestationObject");const c={username:a,credential_id:n.id,client_data_json:l(s.clientDataJSON),attestation_object:l(s.attestationObject)};console.log("Verification data:",c),console.log("Step 5: Sending verification data to server...");const p=await d.verifyRegistration(c);return console.log("Verification response:",p),console.log("=== REGISTRATION COMPLETED ==="),p}catch(e){throw console.error("=== REGISTRATION FAILED ==="),console.error("Error details:",e),e instanceof Error&&(console.error("Error name:",e.name),console.error("Error message:",e.message),console.error("Error stack:",e.stack)),e}}async function w(a){var i;console.log("=== START AUTHENTICATION ==="),console.log("Username:",a);try{const t=await d.getAuthenticationChallenge({username:a});console.log("Challenge response:",t);const r={publicKey:{challenge:g(t.challenge),timeout:t.timeout,rpId:t.rpId,allowCredentials:(i=t.allowCredentials)==null?void 0:i.map(c=>({type:"public-key",id:g(c.id)})),userVerification:t.userVerification}};console.log("Credential request options:",r);const e=await navigator.credentials.get(r);if(!e)throw new Error("Failed to get credential");console.log("Credential retrieved:",e);const o=e.response,n={credential_id:e.id,authenticator_data:l(o.authenticatorData),client_data_json:l(o.clientDataJSON),signature:l(o.signature),user_handle:o.userHandle?l(o.userHandle):void 0};console.log("Verification data:",n);const s=await d.verifyAuthentication(n);return console.log("Verification response:",s),console.log("=== AUTHENTICATION COMPLETED ==="),s}catch(t){throw console.error("=== AUTHENTICATION FAILED ==="),console.error("Error details:",t),t}}export{f as a,w as s};
